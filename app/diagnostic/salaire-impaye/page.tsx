'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'

interface FormData {
  // √âtape 1 : Informations g√©n√©rales
  situationPro: string
  typeContrat: string
  anciennete: string
  salaireBrut: string
  
  // √âtape 2 : D√©tails des salaires impay√©s
  moisImpaye: string
  elementsImpaye: string[]
  montantPrimes: string
  montantHeuresSup: string
  montant13eme: string
  montantAvantages: string
  montantRemboursements: string
  
  // √âtape 3 : Circonstances et contexte
  delaiRetard: string
  raisonEmployeur: string
  contactsEmployeur: string
  autresSalaries: string
  difficultes: string[]
  
  // √âtape 4 : Preuves et documents
  documents: string[]
  communicationsEcrites: string
  temoignages: string
  relances: string
  
  // √âtape 5 : R√©clamation et actions
  actionsDemarches: string[]
  objectifs: string[]
  urgence: string
  conseils: string
}

interface Scores {
  preuves: number
  montantAnciennete: number
  gravite: number
  contexte: number
}

interface Montants {
  salairesDus: number
  primes: number
  heuresSup: number
  congesPayes: number
  treizieme: number
  avantages: number
  remboursements: number
  interetsRetard: number
  dommagesMoraux: number
  total: number
}

export default function DiagnosticSalairesImpaye() {
  const [currentStep, setCurrentStep] = useState(1)
  const [formData, setFormData] = useState<FormData>({
    situationPro: '',
    typeContrat: '',
    anciennete: '',
    salaireBrut: '',
    moisImpaye: '',
    elementsImpaye: [],
    montantPrimes: '',
    montantHeuresSup: '',
    montant13eme: '',
    montantAvantages: '',
    montantRemboursements: '',
    delaiRetard: '',
    raisonEmployeur: '',
    contactsEmployeur: '',
    autresSalaries: '',
    difficultes: [],
    documents: [],
    communicationsEcrites: '',
    temoignages: '',
    relances: '',
    actionsDemarches: [],
    objectifs: [],
    urgence: '',
    conseils: ''
  })
  
  const [showResults, setShowResults] = useState(false)
  const [scores, setScores] = useState<Scores>({
    preuves: 0,
    montantAnciennete: 0,
    gravite: 0,
    contexte: 0
  })
  const [montants, setMontants] = useState<Montants>({
    salairesDus: 0,
    primes: 0,
    heuresSup: 0,
    congesPayes: 0,
    treizieme: 0,
    avantages: 0,
    remboursements: 0,
    interetsRetard: 0,
    dommagesMoraux: 0,
    total: 0
  })
  const [errors, setErrors] = useState<{[key: string]: string}>({})

  // Sauvegarde automatique
  useEffect(() => {
    if (Object.keys(formData).some(key => {
      const value = formData[key as keyof FormData]
      return Array.isArray(value) ? value.length > 0 : value !== ''
    })) {
      localStorage.setItem('justijob_salaires_draft', JSON.stringify(formData))
    }
  }, [formData])

  // Chargement au d√©marrage
  useEffect(() => {
    const saved = localStorage.getItem('justijob_salaires_draft')
    if (saved) {
      const shouldRestore = window.confirm(
        "üìã Un diagnostic en cours a √©t√© trouv√©. Voulez-vous le reprendre ?"
      )
      if (shouldRestore) {
        setFormData(JSON.parse(saved))
      } else {
        localStorage.removeItem('justijob_salaires_draft')
      }
    }
  }, [])

  const handleInputChange = (field: keyof FormData, value: string | string[]) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    // Effacer l'erreur si le champ est corrig√©
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev }
        delete newErrors[field]
        return newErrors
      })
    }
  }

  const handleCheckboxChange = (field: keyof FormData, value: string) => {
    const currentValues = formData[field] as string[]
    const newValues = currentValues.includes(value)
      ? currentValues.filter(v => v !== value)
      : [...currentValues, value]
    handleInputChange(field, newValues)
  }

  const validateStep = (step: number): boolean => {
    const stepErrors: {[key: string]: string} = {}

    if (step === 1) {
      if (!formData.situationPro) {
        stepErrors.situationPro = "‚ö†Ô∏è La situation professionnelle est requise"
      }
      if (!formData.typeContrat) {
        stepErrors.typeContrat = "‚ö†Ô∏è Le type de contrat est requis"
      }
      if (!formData.anciennete) {
        stepErrors.anciennete = "‚ö†Ô∏è L'anciennet√© est requise"
      } else if (parseFloat(formData.anciennete) < 0) {
        stepErrors.anciennete = "‚ö†Ô∏è L'anciennet√© doit √™tre positive"
      } else if (parseFloat(formData.anciennete) > 50) {
        stepErrors.anciennete = "‚ö†Ô∏è V√©rifiez l'anciennet√© (maximum 50 ans)"
      }
      if (!formData.salaireBrut) {
        stepErrors.salaireBrut = "‚ö†Ô∏è Le salaire brut mensuel est requis"
      } else if (parseFloat(formData.salaireBrut) < 1000) {
        stepErrors.salaireBrut = "‚ö†Ô∏è Le salaire semble trop faible (minimum SMIC)"
      } else if (parseFloat(formData.salaireBrut) > 50000) {
        stepErrors.salaireBrut = "‚ö†Ô∏è V√©rifiez le salaire (maximum 50 000‚Ç¨)"
      }
    }

    if (step === 2) {
      if (!formData.moisImpaye) {
        stepErrors.moisImpaye = "‚ö†Ô∏è Le nombre de mois impay√©s est requis"
      } else if (parseInt(formData.moisImpaye) < 1) {
        stepErrors.moisImpaye = "‚ö†Ô∏è Le nombre de mois doit √™tre au moins 1"
      } else if (parseInt(formData.moisImpaye) > 36) {
        stepErrors.moisImpaye = "‚ö†Ô∏è Le nombre de mois ne peut d√©passer 36 (prescription de 3 ans)"
      }
      if (formData.elementsImpaye.length === 0) {
        stepErrors.elementsImpaye = "‚ö†Ô∏è S√©lectionnez au moins un √©l√©ment impay√©"
      }
      
      // Validation des montants des √©l√©ments s√©lectionn√©s
      if (formData.elementsImpaye.includes('primes') && !formData.montantPrimes) {
        stepErrors.montantPrimes = "‚ö†Ô∏è Montant des primes requis"
      }
      if (formData.elementsImpaye.includes('heures_sup') && !formData.montantHeuresSup) {
        stepErrors.montantHeuresSup = "‚ö†Ô∏è Montant des heures sup requises"
      }
      if (formData.elementsImpaye.includes('13eme') && !formData.montant13eme) {
        stepErrors.montant13eme = "‚ö†Ô∏è Montant du 13√®me mois requis"
      }
      if (formData.elementsImpaye.includes('avantages') && !formData.montantAvantages) {
        stepErrors.montantAvantages = "‚ö†Ô∏è Montant des avantages requis"
      }
      if (formData.elementsImpaye.includes('remboursements') && !formData.montantRemboursements) {
        stepErrors.montantRemboursements = "‚ö†Ô∏è Montant des remboursements requis"
      }
    }

    if (step === 3) {
      if (!formData.delaiRetard) {
        stepErrors.delaiRetard = "‚ö†Ô∏è Le d√©lai de retard est requis"
      } else if (parseInt(formData.delaiRetard) < 0) {
        stepErrors.delaiRetard = "‚ö†Ô∏è Le d√©lai doit √™tre positif"
      } else if (parseInt(formData.delaiRetard) > 36) {
        stepErrors.delaiRetard = "‚ö†Ô∏è Le d√©lai ne peut d√©passer 36 mois"
      }
      if (!formData.raisonEmployeur) {
        stepErrors.raisonEmployeur = "‚ö†Ô∏è La raison de l'employeur est requise"
      }
      if (!formData.contactsEmployeur) {
        stepErrors.contactsEmployeur = "‚ö†Ô∏è Les contacts avec l'employeur sont requis"
      }
      if (!formData.autresSalaries) {
        stepErrors.autresSalaries = "‚ö†Ô∏è Indiquez si d'autres salari√©s sont concern√©s"
      }
      if (formData.difficultes.length === 0) {
        stepErrors.difficultes = "‚ö†Ô∏è S√©lectionnez au moins une difficult√© rencontr√©e"
      }
    }

    if (step === 4) {
      if (formData.documents.length === 0) {
        stepErrors.documents = "‚ö†Ô∏è S√©lectionnez au moins un document disponible"
      }
      if (!formData.communicationsEcrites) {
        stepErrors.communicationsEcrites = "‚ö†Ô∏è Les communications √©crites sont requises"
      }
      if (!formData.temoignages) {
        stepErrors.temoignages = "‚ö†Ô∏è Indiquez si vous avez des t√©moignages"
      }
      if (!formData.relances) {
        stepErrors.relances = "‚ö†Ô∏è Les relances effectu√©es sont requises"
      }
    }

    if (step === 5) {
      if (formData.actionsDemarches.length === 0) {
        stepErrors.actionsDemarches = "‚ö†Ô∏è S√©lectionnez au moins une action entreprise"
      }
      if (formData.objectifs.length === 0) {
        stepErrors.objectifs = "‚ö†Ô∏è S√©lectionnez au moins un objectif"
      }
      if (!formData.urgence) {
        stepErrors.urgence = "‚ö†Ô∏è Le niveau d'urgence est requis"
      }
    }

    setErrors(stepErrors)
    
    if (Object.keys(stepErrors).length > 0) {
      window.scrollTo({ top: 0, behavior: 'smooth' })
      return false
    }
    return true
  }

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, 5))
      window.scrollTo({ top: 0, behavior: 'smooth' })
    }
  }

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1))
    window.scrollTo({ top: 0, behavior: 'smooth' })
  }

  const calculateScores = () => {
    let preuves = 0
    let montantAnciennete = 0
    let gravite = 0
    let contexte = 0

    // Score PREUVES (35 points max)
    // Documents (20 points)
    const docsWeight = {
      contrats: 4,
      fiches_paie: 5,
      courriers: 3,
      emails: 3,
      releves: 3,
      attestations: 2
    }
    formData.documents.forEach(doc => {
      preuves += docsWeight[doc as keyof typeof docsWeight] || 0
    })

    // Communications √©crites (8 points)
    if (formData.communicationsEcrites === 'nombreuses') preuves += 8
    else if (formData.communicationsEcrites === 'quelques') preuves += 5
    else if (formData.communicationsEcrites === 'une') preuves += 2

    // T√©moignages (4 points)
    if (formData.temoignages === 'plusieurs') preuves += 4
    else if (formData.temoignages === 'un') preuves += 2

    // Relances (3 points)
    if (formData.relances === 'multiples_ecrites') preuves += 3
    else if (formData.relances === 'quelques') preuves += 2
    else if (formData.relances === 'une') preuves += 1

    // Score MONTANT ET ANCIENNET√â (25 points max)
    const moisImpaye = parseInt(formData.moisImpaye) || 0
    const anciennete = parseFloat(formData.anciennete) || 0

    // Montant impay√© (15 points)
    if (moisImpaye >= 6) montantAnciennete += 15
    else if (moisImpaye >= 4) montantAnciennete += 12
    else if (moisImpaye >= 2) montantAnciennete += 8
    else montantAnciennete += 4

    // Anciennet√© (10 points)
    if (anciennete >= 10) montantAnciennete += 10
    else if (anciennete >= 5) montantAnciennete += 7
    else if (anciennete >= 2) montantAnciennete += 5
    else if (anciennete >= 1) montantAnciennete += 3
    else montantAnciennete += 1

    // Score GRAVIT√â (25 points max)
    const delai = parseInt(formData.delaiRetard) || 0
    
    // D√©lai de retard (10 points)
    if (delai >= 6) gravite += 10
    else if (delai >= 4) gravite += 8
    else if (delai >= 2) gravite += 5
    else gravite += 2

    // Raison employeur (8 points)
    if (formData.raisonEmployeur === 'aucune') gravite += 8
    else if (formData.raisonEmployeur === 'difficultes_non_prouvees') gravite += 5
    else if (formData.raisonEmployeur === 'difficultes_prouvees') gravite += 2

    // Difficultes subies (7 points)
    const difficultesWeight = {
      impossibilite_loyer: 2,
      dettes: 2,
      credit_refus: 1,
      situation_familiale: 1,
      stress_anxiete: 1
    }
    formData.difficultes.forEach(diff => {
      gravite += difficultesWeight[diff as keyof typeof difficultesWeight] || 0
    })

    // Score CONTEXTE FAVORABLE (15 points max)
    // Autres salari√©s concern√©s (5 points)
    if (formData.autresSalaries === 'oui_plusieurs') contexte += 5
    else if (formData.autresSalaries === 'oui_un') contexte += 3
    else if (formData.autresSalaries === 'non') contexte += 0

    // Type de contrat (5 points)
    if (formData.typeContrat === 'cdi') contexte += 5
    else if (formData.typeContrat === 'cdd') contexte += 3
    else contexte += 1

    // Actions d√©j√† entreprises (5 points)
    if (formData.actionsDemarches.includes('mise_demeure')) contexte += 2
    if (formData.actionsDemarches.includes('inspection_travail')) contexte += 2
    if (formData.actionsDemarches.includes('conseil_prudhommes')) contexte += 1

    return { preuves, montantAnciennete, gravite, contexte }
  }

  const calculateMontants = () => {
    const salaire = parseFloat(formData.salaireBrut) || 0
    const moisImpaye = parseInt(formData.moisImpaye) || 0
    const delaiMois = parseInt(formData.delaiRetard) || 0

    let montantsCalc: Montants = {
      salairesDus: 0,
      primes: 0,
      heuresSup: 0,
      congesPayes: 0,
      treizieme: 0,
      avantages: 0,
      remboursements: 0,
      interetsRetard: 0,
      dommagesMoraux: 0,
      total: 0
    }

    // 1. Salaires de base impay√©s
    montantsCalc.salairesDus = salaire * moisImpaye

    // 2. Autres √©l√©ments impay√©s
    if (formData.elementsImpaye.includes('primes')) {
      montantsCalc.primes = parseFloat(formData.montantPrimes) || (salaire * 0.10 * moisImpaye)
    }
    if (formData.elementsImpaye.includes('heures_sup')) {
      montantsCalc.heuresSup = parseFloat(formData.montantHeuresSup) || (salaire * 0.15 * moisImpaye)
    }
    if (formData.elementsImpaye.includes('conges_payes')) {
      montantsCalc.congesPayes = salaire * 0.10 * moisImpaye
    }
    if (formData.elementsImpaye.includes('13eme')) {
      montantsCalc.treizieme = parseFloat(formData.montant13eme) || (salaire * moisImpaye / 12)
    }
    if (formData.elementsImpaye.includes('avantages')) {
      montantsCalc.avantages = parseFloat(formData.montantAvantages) || (salaire * 0.05 * moisImpaye)
    }
    if (formData.elementsImpaye.includes('remboursements')) {
      montantsCalc.remboursements = parseFloat(formData.montantRemboursements) || (200 * moisImpaye)
    }

    // 3. Int√©r√™ts de retard (10% par an, soit 0.833% par mois)
    const montantBase = montantsCalc.salairesDus + montantsCalc.primes + 
                        montantsCalc.heuresSup + montantsCalc.congesPayes + 
                        montantsCalc.treizieme + montantsCalc.avantages + 
                        montantsCalc.remboursements
    
    const tauxInteretMensuel = 0.10 / 12 // 10% annuel = 0.833% mensuel
    montantsCalc.interetsRetard = montantBase * tauxInteretMensuel * delaiMois

    // 4. Dommages et int√©r√™ts pour pr√©judice moral
    const scoreTotal = scores.preuves + scores.montantAnciennete + scores.gravite + scores.contexte
    
    if (scoreTotal >= 70) {
      // Pr√©judice √©lev√©
      if (formData.difficultes.includes('impossibilite_loyer') || 
          formData.difficultes.includes('dettes')) {
        montantsCalc.dommagesMoraux = salaire * 2 // 2 mois
      } else if (formData.difficultes.includes('credit_refus') || 
                 formData.difficultes.includes('stress_anxiete')) {
        montantsCalc.dommagesMoraux = salaire * 1.5 // 1.5 mois
      } else {
        montantsCalc.dommagesMoraux = salaire * 1 // 1 mois
      }
    } else if (scoreTotal >= 50) {
      // Pr√©judice moyen
      montantsCalc.dommagesMoraux = salaire * 0.5 // 0.5 mois
    } else if (scoreTotal >= 30) {
      // Pr√©judice faible
      montantsCalc.dommagesMoraux = salaire * 0.25 // 0.25 mois
    }

    // Total
    montantsCalc.total = montantsCalc.salairesDus + montantsCalc.primes + 
                         montantsCalc.heuresSup + montantsCalc.congesPayes + 
                         montantsCalc.treizieme + montantsCalc.avantages + 
                         montantsCalc.remboursements + montantsCalc.interetsRetard + 
                         montantsCalc.dommagesMoraux

    return montantsCalc
  }

  const handleSubmit = () => {
    if (validateStep(5)) {
      const calculatedScores = calculateScores()
      setScores(calculatedScores)
      
      // Calculer les montants apr√®s avoir mis √† jour les scores
      const tempMontants = calculateMontants()
      
      // Recalculer les dommages avec les bons scores
      const scoreTotal = calculatedScores.preuves + calculatedScores.montantAnciennete + 
                         calculatedScores.gravite + calculatedScores.contexte
      const salaire = parseFloat(formData.salaireBrut) || 0
      
      if (scoreTotal >= 70) {
        if (formData.difficultes.includes('impossibilite_loyer') || 
            formData.difficultes.includes('dettes')) {
          tempMontants.dommagesMoraux = salaire * 2
        } else if (formData.difficultes.includes('credit_refus') || 
                   formData.difficultes.includes('stress_anxiete')) {
          tempMontants.dommagesMoraux = salaire * 1.5
        } else {
          tempMontants.dommagesMoraux = salaire * 1
        }
      } else if (scoreTotal >= 50) {
        tempMontants.dommagesMoraux = salaire * 0.5
      } else if (scoreTotal >= 30) {
        tempMontants.dommagesMoraux = salaire * 0.25
      }
      
      tempMontants.total = tempMontants.salairesDus + tempMontants.primes + 
                           tempMontants.heuresSup + tempMontants.congesPayes + 
                           tempMontants.treizieme + tempMontants.avantages + 
                           tempMontants.remboursements + tempMontants.interetsRetard + 
                           tempMontants.dommagesMoraux
      
      setMontants(tempMontants)
      setShowResults(true)
      localStorage.removeItem('justijob_salaires_draft')
      window.scrollTo({ top: 0, behavior: 'smooth' })
    }
  }

  const resetForm = () => {
    setFormData({
      situationPro: '',
      typeContrat: '',
      anciennete: '',
      salaireBrut: '',
      moisImpaye: '',
      elementsImpaye: [],
      montantPrimes: '',
      montantHeuresSup: '',
      montant13eme: '',
      montantAvantages: '',
      montantRemboursements: '',
      delaiRetard: '',
      raisonEmployeur: '',
      contactsEmployeur: '',
      autresSalaries: '',
      difficultes: [],
      documents: [],
      communicationsEcrites: '',
      temoignages: '',
      relances: '',
      actionsDemarches: [],
      objectifs: [],
      urgence: '',
      conseils: ''
    })
    setCurrentStep(1)
    setShowResults(false)
    setErrors({})
    localStorage.removeItem('justijob_salaires_draft')
    window.scrollTo({ top: 0, behavior: 'smooth' })
  }

  const getStepCompletion = (step: number) => {
    let completed = 0
    let total = 0

    if (step === 1) {
      total = 4
      if (formData.situationPro) completed++
      if (formData.typeContrat) completed++
      if (formData.anciennete) completed++
      if (formData.salaireBrut) completed++
    } else if (step === 2) {
      total = 2 + formData.elementsImpaye.length
      if (formData.moisImpaye) completed++
      if (formData.elementsImpaye.length > 0) completed++
      if (formData.elementsImpaye.includes('primes') && formData.montantPrimes) completed++
      if (formData.elementsImpaye.includes('heures_sup') && formData.montantHeuresSup) completed++
      if (formData.elementsImpaye.includes('13eme') && formData.montant13eme) completed++
      if (formData.elementsImpaye.includes('avantages') && formData.montantAvantages) completed++
      if (formData.elementsImpaye.includes('remboursements') && formData.montantRemboursements) completed++
    } else if (step === 3) {
      total = 5
      if (formData.delaiRetard) completed++
      if (formData.raisonEmployeur) completed++
      if (formData.contactsEmployeur) completed++
      if (formData.autresSalaries) completed++
      if (formData.difficultes.length > 0) completed++
    } else if (step === 4) {
      total = 4
      if (formData.documents.length > 0) completed++
      if (formData.communicationsEcrites) completed++
      if (formData.temoignages) completed++
      if (formData.relances) completed++
    } else if (step === 5) {
      total = 3
      if (formData.actionsDemarches.length > 0) completed++
      if (formData.objectifs.length > 0) completed++
      if (formData.urgence) completed++
    }

    const percentage = total > 0 ? Math.round((completed / total) * 100) : 0
    return { completed, total, percentage }
  }

  const totalScore = scores.preuves + scores.montantAnciennete + scores.gravite + scores.contexte

  const getRecommendations = () => {
    const recs = []
    const score = totalScore

    // Recommandations urgentes
    if (formData.urgence === 'tres_urgent' || parseInt(formData.delaiRetard) >= 6) {
      recs.push({
        title: "üö® ACTION URGENTE",
        description: "Envoyez imm√©diatement une mise en demeure avec AR pour stopper la prescription (3 ans pour les salaires). Consultez un avocat sp√©cialis√© en droit du travail sans d√©lai."
      })
    }

    // Prescription
    const delai = parseInt(formData.delaiRetard) || 0
    if (delai >= 30) {
      recs.push({
        title: "‚ö†Ô∏è ATTENTION PRESCRIPTION",
        description: "Vous approchez des 3 ans de prescription pour les salaires impay√©s (Art. L3245-1). Agissez MAINTENANT pour ne pas perdre vos droits."
      })
    } else if (delai >= 24) {
      recs.push({
        title: "‚è∞ D√âLAI DE PRESCRIPTION",
        description: "Vous avez moins d'un an avant la prescription des salaires les plus anciens. Engagez rapidement une proc√©dure prud'homale."
      })
    }

    // Renforcement des preuves
    if (scores.preuves < 20) {
      recs.push({
        title: "üìÑ RENFORCEZ VOS PREUVES",
        description: "Rassemblez un maximum de documents : fiches de paie, contrat, emails, SMS, relev√©s bancaires. Demandez des attestations de coll√®gues. Plus vous avez de preuves, plus votre dossier est solide."
      })
    }

    // Mise en demeure
    if (!formData.actionsDemarches.includes('mise_demeure')) {
      recs.push({
        title: "üìß ENVOYEZ UNE MISE EN DEMEURE",
        description: "Envoyez une mise en demeure par lettre recommand√©e avec AR r√©clamant le paiement des sommes dues sous 8 jours. C'est une √©tape OBLIGATOIRE avant toute action judiciaire."
      })
    }

    // Proc√©dure collective
    if (formData.autresSalaries === 'oui_plusieurs') {
      recs.push({
        title: "üë• PROC√âDURE COLLECTIVE",
        description: "Plusieurs salari√©s sont concern√©s. Coordonnez-vous pour une action collective aux Prud'hommes ou contactez ensemble l'Inspection du Travail. Vous serez plus forts ensemble."
      })
    }

    // Inspection du travail
    if (!formData.actionsDemarches.includes('inspection_travail') && score >= 50) {
      recs.push({
        title: "üèõÔ∏è CONTACTEZ L'INSPECTION DU TRAVAIL",
        description: "Signalez la situation √† l'Inspection du Travail (DREETS). Ils peuvent effectuer un contr√¥le et mettre en demeure l'employeur de r√©gulariser."
      })
    }

    // Conseil juridique
    if (score >= 60 || montants.total >= 10000) {
      recs.push({
        title: "‚öñÔ∏è CONSULTEZ UN AVOCAT SP√âCIALIS√â",
        description: "Votre dossier pr√©sente des enjeux importants. Un avocat sp√©cialis√© en droit du travail pourra vous d√©fendre efficacement aux Prud'hommes et maximiser vos chances de r√©cup√©rer l'int√©gralit√© des sommes dues."
      })
    }

    // Aide juridictionnelle
    if (formData.difficultes.includes('dettes') || formData.difficultes.includes('impossibilite_loyer')) {
      recs.push({
        title: "üí∞ AIDE JURIDICTIONNELLE",
        description: "Vu votre situation financi√®re difficile, vous pouvez demander l'aide juridictionnelle pour b√©n√©ficier d'un avocat gratuit ou √† tarif r√©duit. Renseignez-vous aupr√®s du tribunal des Prud'hommes."
      })
    }

    // Accompagnement syndical
    recs.push({
      title: "ü§ù ACCOMPAGNEMENT SYNDICAL",
      description: "Contactez un syndicat (CGT, CFDT, FO...). Ils peuvent vous accompagner gratuitement dans vos d√©marches et devant les Prud'hommes."
    })

    return recs
  }

  if (showResults) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 py-12 px-4">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <Link href="/" className="inline-block mb-4">
              <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
                JustiJob
              </h1>
            </Link>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">
              üí∞ R√©sultats de votre diagnostic : Salaires impay√©s
            </h2>
            <p className="text-gray-600">
              Analyse compl√®te de votre situation et estimation des montants r√©cup√©rables
            </p>
          </div>

          {/* Score global */}
          <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
            <div className="text-center mb-8">
              <div className="inline-flex items-center justify-center w-40 h-40 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-2xl">
                <div className="text-center">
                  <div className="text-5xl font-bold">{totalScore}</div>
                  <div className="text-sm">/ 100</div>
                </div>
              </div>
              <h3 className="text-2xl font-bold mt-6 mb-2">
                {totalScore >= 70 ? "üü¢ Dossier SOLIDE" :
                 totalScore >= 50 ? "üü° Dossier MOYEN" :
                 totalScore >= 30 ? "üü† Dossier FRAGILE" :
                 "üî¥ Dossier FAIBLE"}
              </h3>
              <p className="text-gray-600">
                {totalScore >= 70 ? "Excellentes chances de r√©cup√©rer l'int√©gralit√© des sommes" :
                 totalScore >= 50 ? "Bonnes chances de r√©cup√©rer une partie importante" :
                 totalScore >= 30 ? "Il faudra renforcer vos preuves" :
                 "Dossier √† consolider avant toute action"}
              </p>
            </div>

            {/* D√©tail des scores */}
            <div className="grid md:grid-cols-4 gap-6">
              <div className="text-center p-4 bg-blue-50 rounded-xl">
                <div className="text-3xl font-bold text-blue-600">{scores.preuves}/35</div>
                <div className="text-sm font-medium text-gray-700 mt-2">Preuves documentaires</div>
                <div className="text-xs text-gray-500 mt-1">
                  {scores.preuves >= 25 ? "Excellent" :
                   scores.preuves >= 15 ? "Bon" :
                   scores.preuves >= 10 ? "Moyen" : "√Ä renforcer"}
                </div>
              </div>
              
              <div className="text-center p-4 bg-purple-50 rounded-xl">
                <div className="text-3xl font-bold text-purple-600">{scores.montantAnciennete}/25</div>
                <div className="text-sm font-medium text-gray-700 mt-2">Montant & anciennet√©</div>
                <div className="text-xs text-gray-500 mt-1">
                  {scores.montantAnciennete >= 18 ? "√âlev√©" :
                   scores.montantAnciennete >= 12 ? "Moyen" : "Faible"}
                </div>
              </div>
              
              <div className="text-center p-4 bg-red-50 rounded-xl">
                <div className="text-3xl font-bold text-red-600">{scores.gravite}/25</div>
                <div className="text-sm font-medium text-gray-700 mt-2">Gravit√© du manquement</div>
                <div className="text-xs text-gray-500 mt-1">
                  {scores.gravite >= 18 ? "Grave" :
                   scores.gravite >= 12 ? "Moyen" : "Faible"}
                </div>
              </div>
              
              <div className="text-center p-4 bg-green-50 rounded-xl">
                <div className="text-3xl font-bold text-green-600">{scores.contexte}/15</div>
                <div className="text-sm font-medium text-gray-700 mt-2">Contexte favorable</div>
                <div className="text-xs text-gray-500 mt-1">
                  {scores.contexte >= 10 ? "Favorable" :
                   scores.contexte >= 6 ? "Moyen" : "D√©favorable"}
                </div>
              </div>
            </div>
          </div>

          {/* Montants estim√©s */}
          <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
            <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
              üí∂ Montants r√©cup√©rables estim√©s
            </h3>

            <div className="space-y-4 mb-6">
              <div className="flex justify-between items-center p-4 bg-gray-50 rounded-lg">
                <div>
                  <div className="font-semibold text-gray-800">Salaires de base impay√©s</div>
                  <div className="text-sm text-gray-600">
                    {formData.moisImpaye} mois √ó {parseFloat(formData.salaireBrut).toLocaleString()}‚Ç¨
                  </div>
                </div>
                <div className="text-xl font-bold text-gray-800">
                  {montants.salairesDus.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‚Ç¨
                </div>
              </div>

              {montants.primes > 0 && (
                <div className="flex justify-between items-center p-4 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-semibold text-gray-800">Primes impay√©es</div>
                    <div className="text-sm text-gray-600">Montant d√©clar√© ou estim√©</div>
                  </div>
                  <div className="text-xl font-bold text-gray-800">
                    {montants.primes.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‚Ç¨
                  </div>
                </div>
              )}

              {montants.heuresSup > 0 && (
                <div className="flex justify-between items-center p-4 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-semibold text-gray-800">Heures suppl√©mentaires</div>
                    <div className="text-sm text-gray-600">Montant d√©clar√© ou estim√©</div>
                  </div>
                  <div className="text-xl font-bold text-gray-800">
                    {montants.heuresSup.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‚Ç¨
                  </div>
                </div>
              )}

              {montants.congesPayes > 0 && (
                <div className="flex justify-between items-center p-4 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-semibold text-gray-800">Cong√©s pay√©s non pris</div>
                    <div className="text-sm text-gray-600">10% des salaires de base</div>
                  </div>
                  <div className="text-xl font-bold text-gray-800">
                    {montants.congesPayes.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‚Ç¨
                  </div>
                </div>
              )}

              {montants.treizieme > 0 && (
                <div className="flex justify-between items-center p-4 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-semibold text-gray-800">13√®me mois</div>
                    <div className="text-sm text-gray-600">Montant d√©clar√© ou proratis√©</div>
                  </div>
                  <div className="text-xl font-bold text-gray-800">
                    {montants.treizieme.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‚Ç¨
                  </div>
                </div>
              )}

              {montants.avantages > 0 && (
                <div className="flex justify-between items-center p-4 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-semibold text-gray-800">Avantages en nature</div>
                    <div className="text-sm text-gray-600">Montant d√©clar√© ou estim√©</div>
                  </div>
                  <div className="text-xl font-bold text-gray-800">
                    {montants.avantages.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‚Ç¨
                  </div>
                </div>
              )}

              {montants.remboursements > 0 && (
                <div className="flex justify-between items-center p-4 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-semibold text-gray-800">Remboursements de frais</div>
                    <div className="text-sm text-gray-600">Montant d√©clar√© ou estim√©</div>
                  </div>
                  <div className="text-xl font-bold text-gray-800">
                    {montants.remboursements.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‚Ç¨
                  </div>
                </div>
              )}

              <div className="flex justify-between items-center p-4 bg-blue-50 rounded-lg border-2 border-blue-200">
                <div>
                  <div className="font-semibold text-blue-800">Int√©r√™ts de retard</div>
                  <div className="text-sm text-blue-600">
                    10% par an sur {parseInt(formData.delaiRetard)} mois de retard (Art. L3245-1)
                  </div>
                </div>
                <div className="text-xl font-bold text-blue-800">
                  {montants.interetsRetard.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‚Ç¨
                </div>
              </div>

              {montants.dommagesMoraux > 0 && (
                <div className="flex justify-between items-center p-4 bg-purple-50 rounded-lg border-2 border-purple-200">
                  <div>
                    <div className="font-semibold text-purple-800">Dommages et int√©r√™ts</div>
                    <div className="text-sm text-purple-600">
                      Pr√©judice moral li√© aux difficult√©s subies
                    </div>
                  </div>
                  <div className="text-xl font-bold text-purple-800">
                    {montants.dommagesMoraux.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‚Ç¨
                  </div>
                </div>
              )}
            </div>

            <div className="border-t-2 border-gray-200 pt-6">
              <div className="flex justify-between items-center">
                <div>
                  <div className="text-2xl font-bold text-gray-800">TOTAL ESTIM√â</div>
                  <div className="text-sm text-gray-600 mt-1">
                    ‚úÖ Conforme au Code du travail 2024
                  </div>
                </div>
                <div className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
                  {montants.total.toLocaleString('fr-FR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ‚Ç¨
                </div>
              </div>
            </div>

            <div className="mt-6 p-4 bg-yellow-50 border-2 border-yellow-200 rounded-lg">
              <p className="text-sm text-yellow-800">
                <strong>‚ö†Ô∏è Important :</strong> Ces montants sont des <strong>estimations</strong> bas√©es sur les informations fournies. 
                Les montants r√©ellement obtenus d√©pendront des preuves apport√©es, de la d√©cision du Conseil de Prud'hommes, 
                et de la capacit√© financi√®re de l'employeur. Un avocat sp√©cialis√© pourra affiner cette estimation.
              </p>
            </div>
          </div>

          {/* Recommandations */}
          <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
            <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
              üí° Recommandations personnalis√©es
            </h3>
            <div className="space-y-4">
              {getRecommendations().map((rec, index) => (
                <div key={index} className="p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border-l-4 border-blue-500">
                  <h4 className="font-bold text-gray-800 mb-2">{rec.title}</h4>
                  <p className="text-gray-700 text-sm leading-relaxed">{rec.description}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Informations l√©gales */}
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl shadow-xl p-8 text-white mb-8">
            <h3 className="text-2xl font-bold mb-4">‚öñÔ∏è Informations l√©gales importantes</h3>
            <div className="space-y-3 text-sm">
              <p>
                <strong>Prescription :</strong> Vous avez 3 ans √† compter de la date d'exigibilit√© du salaire pour saisir 
                les Prud'hommes (Art. L3245-1 du Code du travail). Au-del√†, vos droits sont perdus.
              </p>
              <p>
                <strong>Mise en demeure obligatoire :</strong> Avant toute action judiciaire, vous devez envoyer une 
                mise en demeure par lettre recommand√©e avec AR demandant le paiement sous 8 jours.
              </p>
              <p>
                <strong>Int√©r√™ts de retard :</strong> Le taux l√©gal est de 10% par an (Art. L3245-1). Les int√©r√™ts courent 
                √† compter de la r√©ception de la mise en demeure.
              </p>
              <p>
                <strong>Tribunal comp√©tent :</strong> Conseil de Prud'hommes du lieu o√π le travail est (ou √©tait) ex√©cut√©, 
                ou du lieu o√π l'employeur est √©tabli.
              </p>
              <p>
                <strong>Gratuit√© :</strong> La proc√©dure prud'homale est gratuite. Vous pouvez vous d√©fendre seul ou √™tre 
                assist√© gratuitement par un syndicat.
              </p>
            </div>
          </div>

          {/* Actions */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button
              onClick={resetForm}
              className="px-8 py-4 bg-white text-gray-700 rounded-xl font-semibold hover:bg-gray-100 transition-all duration-300 shadow-lg border-2 border-gray-200"
            >
              üîÑ Nouveau diagnostic
            </button>
            <Link href="/">
              <button className="w-full px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl font-semibold hover:shadow-2xl transition-all duration-300 shadow-lg">
                üè† Retour √† l'accueil
              </button>
            </Link>
            <button
              onClick={() => window.print()}
              className="px-8 py-4 bg-green-600 text-white rounded-xl font-semibold hover:bg-green-700 transition-all duration-300 shadow-lg"
            >
              üñ®Ô∏è Imprimer le rapport
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 py-12 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <Link href="/" className="inline-block mb-4">
            <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
              JustiJob
            </h1>
          </Link>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">
            üí∞ Diagnostic : Salaires impay√©s
          </h2>
          <p className="text-gray-600">
            Analysez votre situation et estimez vos droits
          </p>
        </div>

        {/* Messages d'erreur */}
        {Object.keys(errors).length > 0 && (
          <div className="bg-red-50 border-2 border-red-200 rounded-xl p-6 mb-6">
            <h3 className="text-red-800 font-bold text-lg mb-3 flex items-center gap-2">
              <span className="text-2xl">‚ö†Ô∏è</span>
              Veuillez corriger les erreurs suivantes :
            </h3>
            <ul className="space-y-2">
              {Object.values(errors).map((error, i) => (
                <li key={i} className="text-red-700 flex items-start gap-2">
                  <span className="text-red-500 mt-1">‚Ä¢</span>
                  <span>{error}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Progression */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <div className="flex items-center justify-between mb-4">
            <span className="text-sm font-medium text-gray-600">
              √âtape {currentStep} sur 5
            </span>
            <span className="text-sm font-medium text-gray-600">
              Compl√©tion : {getStepCompletion(currentStep).percentage}%
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-3 mb-4">
            <div
              className="bg-gradient-to-r from-blue-600 to-purple-600 h-3 rounded-full transition-all duration-500"
              style={{ width: `${(currentStep / 5) * 100}%` }}
            />
          </div>
          <div className="flex justify-between text-xs text-gray-500">
            <span className={currentStep >= 1 ? 'text-blue-600 font-semibold' : ''}>
              {currentStep > 1 ? '‚úì' : '1'} Infos
            </span>
            <span className={currentStep >= 2 ? 'text-blue-600 font-semibold' : ''}>
              {currentStep > 2 ? '‚úì' : '2'} D√©tails
            </span>
            <span className={currentStep >= 3 ? 'text-blue-600 font-semibold' : ''}>
              {currentStep > 3 ? '‚úì' : '3'} Contexte
            </span>
            <span className={currentStep >= 4 ? 'text-blue-600 font-semibold' : ''}>
              {currentStep > 4 ? '‚úì' : '4'} Preuves
            </span>
            <span className={currentStep >= 5 ? 'text-blue-600 font-semibold' : ''}>
              5 Actions
            </span>
          </div>
        </div>

        {/* Formulaire */}
        <div className="bg-white rounded-xl shadow-lg p-8">
          {/* √âTAPE 1 : Informations g√©n√©rales */}
          {currentStep === 1 && (
            <div className="space-y-6">
              <h3 className="text-xl font-bold text-gray-800 mb-4">
                üìã Informations g√©n√©rales
              </h3>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Quelle est votre situation professionnelle actuelle ? *
                </label>
                <select
                  value={formData.situationPro}
                  onChange={(e) => handleInputChange('situationPro', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.situationPro ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">-- S√©lectionnez --</option>
                  <option value="en_poste">Toujours en poste</option>
                  <option value="demission">J'ai d√©missionn√©</option>
                  <option value="licencie">J'ai √©t√© licenci√©(e)</option>
                  <option value="rupture_conventionnelle">Rupture conventionnelle</option>
                  <option value="fin_cdd">Fin de CDD</option>
                </select>
                {errors.situationPro && (
                  <p className="text-red-500 text-sm mt-1">{errors.situationPro}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Type de contrat *
                </label>
                <select
                  value={formData.typeContrat}
                  onChange={(e) => handleInputChange('typeContrat', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.typeContrat ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">-- S√©lectionnez --</option>
                  <option value="cdi">CDI</option>
                  <option value="cdd">CDD</option>
                  <option value="interim">Int√©rim</option>
                  <option value="apprentissage">Apprentissage</option>
                  <option value="stage">Stage</option>
                </select>
                {errors.typeContrat && (
                  <p className="text-red-500 text-sm mt-1">{errors.typeContrat}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Anciennet√© dans l'entreprise (en ann√©es) *
                </label>
                <input
                  type="number"
                  step="0.1"
                  value={formData.anciennete}
                  onChange={(e) => handleInputChange('anciennete', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.anciennete ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Ex: 3.5"
                />
                {errors.anciennete && (
                  <p className="text-red-500 text-sm mt-1">{errors.anciennete}</p>
                )}
                <p className="text-xs text-gray-500 mt-1">
                  ‚ÑπÔ∏è L'anciennet√© impacte les d√©lais de prescription (3 ans pour les salaires)
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Salaire brut mensuel (en ‚Ç¨) *
                </label>
                <input
                  type="number"
                  value={formData.salaireBrut}
                  onChange={(e) => handleInputChange('salaireBrut', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.salaireBrut ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Ex: 2500"
                />
                {errors.salaireBrut && (
                  <p className="text-red-500 text-sm mt-1">{errors.salaireBrut}</p>
                )}
                <p className="text-xs text-gray-500 mt-1">
                  ‚ÑπÔ∏è Indiquez votre salaire brut mensuel habituel (hors primes exceptionnelles)
                </p>
              </div>
            </div>
          )}

          {/* √âTAPE 2 : D√©tails des salaires impay√©s */}
          {currentStep === 2 && (
            <div className="space-y-6">
              <h3 className="text-xl font-bold text-gray-800 mb-4">
                üí∂ D√©tails des salaires impay√©s
              </h3>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Nombre de mois de salaire impay√©s (total ou partiel) *
                </label>
                <input
                  type="number"
                  min="1"
                  max="36"
                  value={formData.moisImpaye}
                  onChange={(e) => handleInputChange('moisImpaye', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.moisImpaye ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Ex: 3"
                />
                {errors.moisImpaye && (
                  <p className="text-red-500 text-sm mt-1">{errors.moisImpaye}</p>
                )}
                <p className="text-xs text-gray-500 mt-1">
                  ‚ÑπÔ∏è Maximum 36 mois (prescription de 3 ans - Art. L3245-1)
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Quels √©l√©ments de r√©mun√©ration sont impay√©s ? * (plusieurs choix possibles)
                </label>
                <div className="space-y-2">
                  {[
                    { value: 'salaire_base', label: 'Salaire de base' },
                    { value: 'primes', label: 'Primes (performance, anciennet√©, etc.)' },
                    { value: 'heures_sup', label: 'Heures suppl√©mentaires' },
                    { value: 'conges_payes', label: 'Indemnit√©s de cong√©s pay√©s' },
                    { value: '13eme', label: '13√®me mois' },
                    { value: 'avantages', label: 'Avantages en nature (v√©hicule, logement, etc.)' },
                    { value: 'remboursements', label: 'Remboursements de frais professionnels' }
                  ].map(option => (
                    <label key={option.value} className="flex items-center gap-3 p-3 border-2 border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.elementsImpaye.includes(option.value)}
                        onChange={() => handleCheckboxChange('elementsImpaye', option.value)}
                        className="w-5 h-5 text-blue-600 focus:ring-2 focus:ring-blue-500"
                      />
                      <span className="text-gray-700">{option.label}</span>
                    </label>
                  ))}
                </div>
                {errors.elementsImpaye && (
                  <p className="text-red-500 text-sm mt-1">{errors.elementsImpaye}</p>
                )}
              </div>

              {/* Champs conditionnels selon les √©l√©ments s√©lectionn√©s */}
              {formData.elementsImpaye.includes('primes') && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Montant total des primes impay√©es (en ‚Ç¨) *
                  </label>
                  <input
                    type="number"
                    value={formData.montantPrimes}
                    onChange={(e) => handleInputChange('montantPrimes', e.target.value)}
                    className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      errors.montantPrimes ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="Ex: 1500"
                  />
                  {errors.montantPrimes && (
                    <p className="text-red-500 text-sm mt-1">{errors.montantPrimes}</p>
                  )}
                </div>
              )}

              {formData.elementsImpaye.includes('heures_sup') && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Montant total des heures suppl√©mentaires impay√©es (en ‚Ç¨) *
                  </label>
                  <input
                    type="number"
                    value={formData.montantHeuresSup}
                    onChange={(e) => handleInputChange('montantHeuresSup', e.target.value)}
                    className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      errors.montantHeuresSup ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="Ex: 800"
                  />
                  {errors.montantHeuresSup && (
                    <p className="text-red-500 text-sm mt-1">{errors.montantHeuresSup}</p>
                  )}
                </div>
              )}

              {formData.elementsImpaye.includes('13eme') && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Montant du 13√®me mois impay√© (en ‚Ç¨) *
                  </label>
                  <input
                    type="number"
                    value={formData.montant13eme}
                    onChange={(e) => handleInputChange('montant13eme', e.target.value)}
                    className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      errors.montant13eme ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="Ex: 2500"
                  />
                  {errors.montant13eme && (
                    <p className="text-red-500 text-sm mt-1">{errors.montant13eme}</p>
                  )}
                </div>
              )}

              {formData.elementsImpaye.includes('avantages') && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Montant des avantages en nature impay√©s (en ‚Ç¨) *
                  </label>
                  <input
                    type="number"
                    value={formData.montantAvantages}
                    onChange={(e) => handleInputChange('montantAvantages', e.target.value)}
                    className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      errors.montantAvantages ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="Ex: 400"
                  />
                  {errors.montantAvantages && (
                    <p className="text-red-500 text-sm mt-1">{errors.montantAvantages}</p>
                  )}
                </div>
              )}

              {formData.elementsImpaye.includes('remboursements') && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Montant total des remboursements impay√©s (en ‚Ç¨) *
                  </label>
                  <input
                    type="number"
                    value={formData.montantRemboursements}
                    onChange={(e) => handleInputChange('montantRemboursements', e.target.value)}
                    className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      errors.montantRemboursements ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="Ex: 300"
                  />
                  {errors.montantRemboursements && (
                    <p className="text-red-500 text-sm mt-1">{errors.montantRemboursements}</p>
                  )}
                </div>
              )}
            </div>
          )}

          {/* √âTAPE 3 : Circonstances et contexte */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <h3 className="text-xl font-bold text-gray-800 mb-4">
                üìÖ Circonstances et contexte
              </h3>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Depuis combien de temps les salaires sont-ils en retard ? (en mois) *
                </label>
                <input
                  type="number"
                  min="0"
                  max="36"
                  value={formData.delaiRetard}
                  onChange={(e) => handleInputChange('delaiRetard', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.delaiRetard ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Ex: 6"
                />
                {errors.delaiRetard && (
                  <p className="text-red-500 text-sm mt-1">{errors.delaiRetard}</p>
                )}
                <p className="text-xs text-gray-500 mt-1">
                  ‚ÑπÔ∏è Le d√©lai impacte les int√©r√™ts de retard (10% par an)
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Quelle raison l'employeur a-t-il donn√©e pour justifier le non-paiement ? *
                </label>
                <select
                  value={formData.raisonEmployeur}
                  onChange={(e) => handleInputChange('raisonEmployeur', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.raisonEmployeur ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">-- S√©lectionnez --</option>
                  <option value="aucune">Aucune raison donn√©e</option>
                  <option value="difficultes_non_prouvees">Difficult√©s financi√®res non prouv√©es</option>
                  <option value="difficultes_prouvees">Difficult√©s financi√®res prouv√©es (proc√©dure collective)</option>
                  <option value="contestation">Contestation du montant d√ª</option>
                  <option value="erreur_paie">Erreur dans la comptabilit√©/paie</option>
                  <option value="autre">Autre raison</option>
                </select>
                {errors.raisonEmployeur && (
                  <p className="text-red-500 text-sm mt-1">{errors.raisonEmployeur}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Avez-vous eu des contacts avec l'employeur concernant ces impay√©s ? *
                </label>
                <select
                  value={formData.contactsEmployeur}
                  onChange={(e) => handleInputChange('contactsEmployeur', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.contactsEmployeur ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">-- S√©lectionnez --</option>
                  <option value="nombreux_ecrits">Nombreux contacts par √©crit</option>
                  <option value="quelques_ecrits">Quelques contacts par √©crit</option>
                  <option value="oraux">Contacts oraux uniquement</option>
                  <option value="aucun">Aucun contact (employeur injoignable)</option>
                </select>
                {errors.contactsEmployeur && (
                  <p className="text-red-500 text-sm mt-1">{errors.contactsEmployeur}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  D'autres salari√©s sont-ils concern√©s par ces impay√©s ? *
                </label>
                <select
                  value={formData.autresSalaries}
                  onChange={(e) => handleInputChange('autresSalaries', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.autresSalaries ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">-- S√©lectionnez --</option>
                  <option value="oui_plusieurs">Oui, plusieurs coll√®gues</option>
                  <option value="oui_un">Oui, un ou deux coll√®gues</option>
                  <option value="non">Non, je suis le/la seul(e)</option>
                  <option value="ne_sais_pas">Je ne sais pas</option>
                </select>
                {errors.autresSalaries && (
                  <p className="text-red-500 text-sm mt-1">{errors.autresSalaries}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Quelles difficult√©s avez-vous rencontr√©es √† cause de ces impay√©s ? * (plusieurs choix possibles)
                </label>
                <div className="space-y-2">
                  {[
                    { value: 'impossibilite_loyer', label: 'Impossibilit√© de payer le loyer/cr√©dit immobilier' },
                    { value: 'dettes', label: 'Accumulation de dettes' },
                    { value: 'credit_refus', label: 'Refus de cr√©dit bancaire' },
                    { value: 'situation_familiale', label: 'Impact sur la situation familiale' },
                    { value: 'stress_anxiete', label: 'Stress, anxi√©t√©, probl√®mes de sant√©' }
                  ].map(option => (
                    <label key={option.value} className="flex items-center gap-3 p-3 border-2 border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.difficultes.includes(option.value)}
                        onChange={() => handleCheckboxChange('difficultes', option.value)}
                        className="w-5 h-5 text-blue-600 focus:ring-2 focus:ring-blue-500"
                      />
                      <span className="text-gray-700">{option.label}</span>
                    </label>
                  ))}
                </div>
                {errors.difficultes && (
                  <p className="text-red-500 text-sm mt-1">{errors.difficultes}</p>
                )}
              </div>
            </div>
          )}

          {/* √âTAPE 4 : Preuves et documents */}
          {currentStep === 4 && (
            <div className="space-y-6">
              <h3 className="text-xl font-bold text-gray-800 mb-4">
                üìÑ Preuves et documents disponibles
              </h3>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Quels documents poss√©dez-vous ? * (plusieurs choix possibles)
                </label>
                <div className="space-y-2">
                  {[
                    { value: 'contrats', label: 'Contrat de travail' },
                    { value: 'fiches_paie', label: 'Fiches de paie (compl√®tes ou partielles)' },
                    { value: 'courriers', label: 'Courriers de l\'employeur' },
                    { value: 'emails', label: 'Emails avec l\'employeur' },
                    { value: 'releves', label: 'Relev√©s bancaires (montrant l\'absence de versement)' },
                    { value: 'attestations', label: 'Attestations de coll√®gues' }
                  ].map(option => (
                    <label key={option.value} className="flex items-center gap-3 p-3 border-2 border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.documents.includes(option.value)}
                        onChange={() => handleCheckboxChange('documents', option.value)}
                        className="w-5 h-5 text-blue-600 focus:ring-2 focus:ring-blue-500"
                      />
                      <span className="text-gray-700">{option.label}</span>
                    </label>
                  ))}
                </div>
                {errors.documents && (
                  <p className="text-red-500 text-sm mt-1">{errors.documents}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Avez-vous des communications √©crites avec l'employeur au sujet des impay√©s ? *
                </label>
                <select
                  value={formData.communicationsEcrites}
                  onChange={(e) => handleInputChange('communicationsEcrites', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.communicationsEcrites ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">-- S√©lectionnez --</option>
                  <option value="nombreuses">Oui, nombreuses (emails, courriers AR)</option>
                  <option value="quelques">Oui, quelques-unes</option>
                  <option value="une">Oui, une seule</option>
                  <option value="non">Non, aucune trace √©crite</option>
                </select>
                {errors.communicationsEcrites && (
                  <p className="text-red-500 text-sm mt-1">{errors.communicationsEcrites}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Avez-vous des t√©moignages de coll√®gues confirmant les impay√©s ? *
                </label>
                <select
                  value={formData.temoignages}
                  onChange={(e) => handleInputChange('temoignages', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.temoignages ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">-- S√©lectionnez --</option>
                  <option value="plusieurs">Oui, plusieurs t√©moignages √©crits</option>
                  <option value="un">Oui, un t√©moignage √©crit</option>
                  <option value="oraux">Oui, mais seulement oraux</option>
                  <option value="non">Non, aucun t√©moignage</option>
                </select>
                {errors.temoignages && (
                  <p className="text-red-500 text-sm mt-1">{errors.temoignages}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Avez-vous effectu√© des relances aupr√®s de l'employeur ? *
                </label>
                <select
                  value={formData.relances}
                  onChange={(e) => handleInputChange('relances', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.relances ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">-- S√©lectionnez --</option>
                  <option value="multiples_ecrites">Oui, multiples relances √©crites (AR)</option>
                  <option value="quelques">Oui, quelques relances</option>
                  <option value="une">Oui, une seule relance</option>
                  <option value="non">Non, aucune relance formelle</option>
                </select>
                {errors.relances && (
                  <p className="text-red-500 text-sm mt-1">{errors.relances}</p>
                )}
              </div>
            </div>
          )}

          {/* √âTAPE 5 : R√©clamation et actions */}
          {currentStep === 5 && (
            <div className="space-y-6">
              <h3 className="text-xl font-bold text-gray-800 mb-4">
                ‚öñÔ∏è R√©clamation et prochaines √©tapes
              </h3>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Quelles d√©marches avez-vous d√©j√† entreprises ? * (plusieurs choix possibles)
                </label>
                <div className="space-y-2">
                  {[
                    { value: 'mise_demeure', label: 'Envoi d\'une mise en demeure (AR)' },
                    { value: 'inspection_travail', label: 'Saisine de l\'Inspection du Travail' },
                    { value: 'conseil_prudhommes', label: 'Saisine du Conseil de Prud\'hommes' },
                    { value: 'syndicat', label: 'Contact avec un syndicat' },
                    { value: 'avocat', label: 'Consultation d\'un avocat' },
                    { value: 'aucune', label: 'Aucune d√©marche formelle pour l\'instant' }
                  ].map(option => (
                    <label key={option.value} className="flex items-center gap-3 p-3 border-2 border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.actionsDemarches.includes(option.value)}
                        onChange={() => handleCheckboxChange('actionsDemarches', option.value)}
                        className="w-5 h-5 text-blue-600 focus:ring-2 focus:ring-blue-500"
                      />
                      <span className="text-gray-700">{option.label}</span>
                    </label>
                  ))}
                </div>
                {errors.actionsDemarches && (
                  <p className="text-red-500 text-sm mt-1">{errors.actionsDemarches}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Quels sont vos objectifs ? * (plusieurs choix possibles)
                </label>
                <div className="space-y-2">
                  {[
                    { value: 'recuperation_totale', label: 'R√©cup√©rer l\'int√©gralit√© des sommes dues' },
                    { value: 'interets', label: 'Obtenir les int√©r√™ts de retard' },
                    { value: 'dommages', label: 'Obtenir des dommages et int√©r√™ts' },
                    { value: 'sanctions', label: 'Faire sanctionner l\'employeur' },
                    { value: 'maintien_emploi', label: 'Conserver mon emploi' },
                    { value: 'rupture_torts', label: 'Obtenir une rupture aux torts de l\'employeur' }
                  ].map(option => (
                    <label key={option.value} className="flex items-center gap-3 p-3 border-2 border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.objectifs.includes(option.value)}
                        onChange={() => handleCheckboxChange('objectifs', option.value)}
                        className="w-5 h-5 text-blue-600 focus:ring-2 focus:ring-blue-500"
                      />
                      <span className="text-gray-700">{option.label}</span>
                    </label>
                  ))}
                </div>
                {errors.objectifs && (
                  <p className="text-red-500 text-sm mt-1">{errors.objectifs}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Quel est le niveau d'urgence de votre situation ? *
                </label>
                <select
                  value={formData.urgence}
                  onChange={(e) => handleInputChange('urgence', e.target.value)}
                  className={`w-full p-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.urgence ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">-- S√©lectionnez --</option>
                  <option value="tres_urgent">Tr√®s urgent (situation financi√®re critique)</option>
                  <option value="urgent">Urgent (difficult√©s importantes)</option>
                  <option value="normal">Normal (je veux r√©cup√©rer mes droits)</option>
                  <option value="pas_urgent">Pas urgent (simple v√©rification)</option>
                </select>
                {errors.urgence && (
                  <p className="text-red-500 text-sm mt-1">{errors.urgence}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Informations compl√©mentaires (facultatif)
                </label>
                <textarea
                  value={formData.conseils}
                  onChange={(e) => handleInputChange('conseils', e.target.value)}
                  rows={4}
                  className="w-full p-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Ajoutez toute information que vous jugez utile pour votre diagnostic..."
                />
              </div>
            </div>
          )}

          {/* Boutons de navigation */}
          <div className="flex gap-4 mt-8">
            {currentStep > 1 && (
              <button
                onClick={prevStep}
                className="flex-1 px-6 py-3 bg-gray-200 text-gray-700 rounded-lg font-semibold hover:bg-gray-300 transition-all duration-300"
              >
                ‚Üê Pr√©c√©dent
              </button>
            )}
            {currentStep < 5 ? (
              <button
                onClick={nextStep}
                className="flex-1 px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-semibold hover:shadow-lg transition-all duration-300"
              >
                Suivant ‚Üí
              </button>
            ) : (
              <button
                onClick={handleSubmit}
                className="flex-1 px-6 py-3 bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-lg font-semibold hover:shadow-lg transition-all duration-300"
              >
                üéØ Obtenir mon diagnostic
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
